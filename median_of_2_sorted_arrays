Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
----------
double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size){
int a[nums1Size+nums2Size];
    int k=0;
    int i=0,j=0;
    int z,z1;
        double d;
    int l=nums1Size+nums2Size;
while(i<nums1Size && j<nums2Size){
    if(nums1[i]<nums2[j]){
        a[k++]=nums1[i++];
    }
    else{
        a[k++]=nums2[j++];
    }
}
    while(i<nums1Size){
        a[k++]=nums1[i++];
    }
    while(j<nums2Size){
        a[k++]=nums2[j++];
    }
    if((nums1Size+nums2Size)%2!=0){
        z=(nums1Size+nums2Size)/2;
        d=a[z];
    }
    else{
      z=l/2;
      z1=z-1;
        d=(a[z]+a[z1])/2.0;
    }
    return d;
}
